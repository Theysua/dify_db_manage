import React, { useState, useEffect } from 'react';
import { 
  Card, 
  Form, 
  Input, 
  Button, 
  message, 
  Select, 
  DatePicker, 
  Typography, 
  Row, 
  Col,
  InputNumber,
  Steps,
  Divider,
  Result
} from 'antd';
import { 
  CheckCircleOutlined, 
  UserOutlined, 
  KeyOutlined, 
  FieldTimeOutlined,
  FileTextOutlined,
  FileProtectOutlined
} from '@ant-design/icons';
import axios from 'axios';
import moment from 'moment';
import '../../styles/AppleStyle.css';

const { Title, Text } = Typography;
const { Option } = Select;
const { TextArea } = Input;
const { RangePicker } = DatePicker;

/**
 * Operations console component for creating new licenses
 */
const Operations = () => {
  const [current, setCurrent] = useState(0);
  const [licenseForm] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [customers, setCustomers] = useState([]);
  const [salesReps, setSalesReps] = useState([]);
  const [resellers, setResellers] = useState([]);
  const [success, setSuccess] = useState(false);
  const [licenseId, setLicenseId] = useState('');

  // Fetch reference data on component mount
  useEffect(() => {
    fetchReferenceData();
  }, []);

  // This function will be called after form submission to get a license ID
  const getNewLicenseId = async (formData) => {
    try {
      setLoading(true);
      // Call the virtual API endpoint that will eventually be implemented by the license server
      // Sending the form data to generate an appropriate license ID based on the license details
      const response = await axios.post('/api/v1/create_license', formData);
      return response.data?.licenseId || `TEMP-${new Date().getFullYear()}${String(new Date().getMonth() + 1).padStart(2, '0')}-${Math.floor(Math.random() * 1000).toString().padStart(3, '0')}`;
    } catch (error) {
      console.error('Error obtaining license ID:', error);
      message.warning('无法从许可证服务器获取ID，已生成临时ID');
      
      // Fallback to a temporary ID if the server is unavailable
      const today = new Date();
      const year = today.getFullYear();
      const month = String(today.getMonth() + 1).padStart(2, '0');
      const randomNum = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
      return `TEMP-${year}${month}-${randomNum}`;
    } finally {
      setLoading(false);
    }
  };

  // Fetch customers, sales reps, and resellers
  const fetchReferenceData = async () => {
    try {
      // Try to get real data from the backend
      const [customersRes, salesRepsRes, resellersRes] = await Promise.all([
        axios.get('/api/v1/customers'),
        axios.get('/api/v1/sales-reps'),
        axios.get('/api/v1/resellers')
      ]);
      
      setCustomers(customersRes.data || []);
      setSalesReps(salesRepsRes.data || []);
      setResellers(resellersRes.data || []);
    } catch (error) {
      console.error('Failed to fetch reference data:', error);
      // Mock data for development
      setCustomers([
        { CustomerID: 1, Name: '测试客户1' },
        { CustomerID: 2, Name: '测试客户2' },
        { CustomerID: 3, Name: '测试客户3' }
      ]);
      setSalesReps([
        { SalesRepID: 1, Name: '销售代表1' },
        { SalesRepID: 2, Name: '销售代表2' }
      ]);
      setResellers([
        { ResellerID: 1, Name: '代理商1' },
        { ResellerID: 2, Name: '代理商2' }
      ]);
    }
  };

  // Handle form submission
  const handleSubmit = async () => {
    try {
      const values = await licenseForm.validateFields();
      setLoading(true);
      
      // Prepare form data without license ID (which will be generated by the server)
      const formData = {
        CustomerID: values.customerId,
        SalesRepID: values.salesRepId,
        ResellerID: values.resellerId,
        ProductName: 'Dify Enterprise',
        LicenseType: values.licenseType,
        OrderDate: values.orderDate.format('YYYY-MM-DD'),
        StartDate: values.startDate.format('YYYY-MM-DD'),
        ExpiryDate: values.expiryDate.format('YYYY-MM-DD'),
        AuthorizedWorkspaces: values.authorizedWorkspaces,
        AuthorizedUsers: values.authorizedUsers,
        ActualWorkspaces: 0,
        ActualUsers: 0,
        Notes: values.notes,
        LicenseStatus: 'PENDING'
      };
      
      // Get a license ID from the license server based on the form data
      const newLicenseId = await getNewLicenseId(formData);
      setLicenseId(newLicenseId);
      
      // Add the generated license ID to the form data
      formData.LicenseID = newLicenseId;
      
      // Create the license with the obtained license ID
      await axios.post('/api/v1/licenses', formData);
      
      // Show success
      setSuccess(true);
      message.success(`许可证创建成功！许可证ID: ${newLicenseId}`);
    } catch (error) {
      console.error('Failed to create license:', error);
      message.error('创建许可证失败，请检查数据并重试');
    } finally {
      setLoading(false);
    }
  };

  // Reset form and restart process
  const handleReset = () => {
    licenseForm.resetFields();
    setLicenseId('');
    setSuccess(false);
    setCurrent(0);
  };

  // Steps for the license creation process
  const steps = [
    {
      title: '客户信息',
      icon: <UserOutlined />,
      content: (
        <Card className="apple-card" bordered={false}>
          <Form.Item
            name="customerId"
            label="选择客户"
            rules={[{ required: true, message: '请选择客户' }]}
          >
            <Select 
              placeholder="选择客户" 
              className="apple-select"
              showSearch
              optionFilterProp="children"
            >
              {customers.map(customer => (
                <Option key={customer.CustomerID} value={customer.CustomerID}>
                  {customer.Name}
                </Option>
              ))}
            </Select>
          </Form.Item>
          
          <Form.Item
            name="salesRepId"
            label="销售代表"
            rules={[{ required: true, message: '请选择销售代表' }]}
          >
            <Select 
              placeholder="选择销售代表" 
              className="apple-select"
              showSearch
              optionFilterProp="children"
            >
              {salesReps.map(rep => (
                <Option key={rep.SalesRepID} value={rep.SalesRepID}>
                  {rep.Name}
                </Option>
              ))}
            </Select>
          </Form.Item>
          
          <Form.Item
            name="resellerId"
            label="代理商"
          >
            <Select 
              placeholder="选择代理商（可选）" 
              className="apple-select"
              allowClear
              showSearch
              optionFilterProp="children"
            >
              {resellers.map(reseller => (
                <Option key={reseller.ResellerID} value={reseller.ResellerID}>
                  {reseller.Name}
                </Option>
              ))}
            </Select>
          </Form.Item>
        </Card>
      ),
    },
    {
      title: '产品信息',
      icon: <KeyOutlined />,
      content: (
        <Card className="apple-card" bordered={false}>
          {/* 许可证ID将在提交表单后由服务器自动生成 */}
          
          <Form.Item
            name="productName"
            label="产品名称"
            initialValue="Dify Enterprise"
          >
            <Input 
              placeholder="Dify Enterprise" 
              disabled={true}
              className="apple-input"
              style={{ backgroundColor: '#f5f5f5' }}
            />
          </Form.Item>
          
          <Form.Item
            name="licenseType"
            label="许可类型"
            rules={[{ required: true, message: '请选择许可类型' }]}
          >
            <Select 
              placeholder="选择许可类型" 
              className="apple-select"
            >
              <Option value="企业版">企业版</Option>
              <Option value="专业版">专业版</Option>
              <Option value="基础版">基础版</Option>
              <Option value="试用版">试用版</Option>
            </Select>
          </Form.Item>
        </Card>
      ),
    },
    {
      title: '使用限制',
      icon: <FieldTimeOutlined />,
      content: (
        <Card className="apple-card" bordered={false}>
          <Form.Item
            name="orderDate"
            label="下单日期"
            rules={[{ required: true, message: '请选择下单日期' }]}
            initialValue={moment()}
          >
            <DatePicker className="apple-date-picker" style={{ width: '100%' }} />
          </Form.Item>
          
          <Row gutter={24}>
            <Col span={12}>
              <Form.Item
                name="startDate"
                label="开始日期"
                rules={[{ required: true, message: '请选择开始日期' }]}
                initialValue={moment()}
              >
                <DatePicker className="apple-date-picker" style={{ width: '100%' }} />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="expiryDate"
                label="到期日期"
                rules={[{ required: true, message: '请选择到期日期' }]}
                initialValue={moment().add(1, 'year')}
              >
                <DatePicker className="apple-date-picker" style={{ width: '100%' }} />
              </Form.Item>
            </Col>
          </Row>
          
          <Row gutter={24}>
            <Col span={12}>
              <Form.Item
                name="authorizedWorkspaces"
                label="授权工作区数"
                rules={[{ required: true, message: '请输入授权工作区数' }]}
                initialValue={1}
              >
                <InputNumber min={1} className="apple-input-number" style={{ width: '100%' }} />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="authorizedUsers"
                label="授权用户数"
                rules={[{ required: true, message: '请输入授权用户数' }]}
                initialValue={10}
              >
                <InputNumber min={1} className="apple-input-number" style={{ width: '100%' }} />
              </Form.Item>
            </Col>
          </Row>
        </Card>
      ),
    },
    {
      title: '附加信息',
      icon: <FileTextOutlined />,
      content: (
        <Card className="apple-card" bordered={false}>
          <Form.Item
            name="notes"
            label="备注"
          >
            <TextArea 
              rows={4} 
              placeholder="输入有关此许可证的备注信息..." 
              className="apple-text-area"
            />
          </Form.Item>
        </Card>
      ),
    },
    {
      title: '确认订单',
      icon: <FileProtectOutlined />,
      content: (
        <Card className="apple-card" bordered={false}>
          <Title level={4} className="apple-title">请确认以下信息</Title>
          <div style={{ 
            padding: '10px 15px', 
            backgroundColor: '#f0f9ff', 
            border: '1px solid #d0e8ff',
            borderRadius: '4px',
            marginBottom: '20px'
          }}>
            <Text style={{ color: '#0066cc' }}>
              <strong>注意：</strong> 许可证ID将在您提交后由中央许可证服务器生成。生成的ID会基于您选择的产品类型、客户信息等参数。
            </Text>
          </div>
          <Form.Item shouldUpdate>
            {() => (
              <div>
                <Row gutter={[16, 8]}>
                  <Col span={12}>
                    <Text strong>许可证ID:</Text>
                  </Col>
                  <Col span={12}>
                    <Text>将在提交后由系统自动生成</Text>
                  </Col>
                  
                  <Col span={12}>
                    <Text strong>客户:</Text>
                  </Col>
                  <Col span={12}>
                    <Text>
                      {customers.find(c => c.CustomerID === licenseForm.getFieldValue('customerId'))?.Name || ''}
                    </Text>
                  </Col>
                  
                  <Col span={12}>
                    <Text strong>销售代表:</Text>
                  </Col>
                  <Col span={12}>
                    <Text>
                      {salesReps.find(r => r.SalesRepID === licenseForm.getFieldValue('salesRepId'))?.Name || ''}
                    </Text>
                  </Col>
                  
                  <Col span={12}>
                    <Text strong>产品:</Text>
                  </Col>
                  <Col span={12}>
                    <Text>
                      {licenseForm.getFieldValue('productName')} {licenseForm.getFieldValue('productVersion')}
                    </Text>
                  </Col>
                  
                  <Col span={12}>
                    <Text strong>许可类型:</Text>
                  </Col>
                  <Col span={12}>
                    <Text>{licenseForm.getFieldValue('licenseType')}</Text>
                  </Col>
                  
                  <Col span={12}>
                    <Text strong>有效期:</Text>
                  </Col>
                  <Col span={12}>
                    <Text>
                      {licenseForm.getFieldValue('startDate')?.format('YYYY-MM-DD')} 至 {licenseForm.getFieldValue('expiryDate')?.format('YYYY-MM-DD')}
                    </Text>
                  </Col>
                  
                  <Col span={12}>
                    <Text strong>授权用户数:</Text>
                  </Col>
                  <Col span={12}>
                    <Text>{licenseForm.getFieldValue('authorizedUsers')}</Text>
                  </Col>
                </Row>
              </div>
            )}
          </Form.Item>
        </Card>
      ),
    },
  ];

  // Render success page if license creation was successful
  if (success) {
    return (
      <div className="operations-container">
        <Card className="apple-card" bordered={false}>
          <Result
            status="success"
            title="许可证创建成功！"
            subTitle="该许可证已写入数据库并准备好使用"
            extra={[
              <Button 
                type="primary" 
                key="console" 
                onClick={handleReset}
                className="apple-button apple-button-primary"
              >
                创建新许可证
              </Button>,
            ]}
          />
          {licenseId && (
            <div className="license-id-container" style={{ 
              textAlign: 'center', 
              margin: '30px auto',
              maxWidth: '400px',
              padding: '20px',
              backgroundColor: '#f7f7f7',
              borderRadius: '8px',
              border: '1px solid #eaeaea' 
            }}>
              <h3 style={{ marginBottom: '15px', fontSize: '16px' }}>许可证 ID</h3>
              <div style={{ 
                padding: '15px', 
                backgroundColor: '#fff', 
                border: '1px dashed #ccc',
                borderRadius: '4px',
                fontSize: '18px',
                fontWeight: 'bold',
                letterSpacing: '1px',
                marginBottom: '15px',
                fontFamily: 'monospace'
              }}>
                {licenseId}
              </div>
              <p style={{ color: '#888', fontSize: '14px' }}>
                请妥善保存此许可证 ID，它是识别和管理该许可证的唯一标识符。
              </p>
            </div>
          )}
        </Card>
      </div>
    );
  }

  // Main rendering - step form
  return (
    <div className="operations-container">
      <Title level={2} className="apple-title">运营工作台 - 新建许可证</Title>
      <Card className="apple-card" bordered={false}>
        <Steps
          current={current}
          items={steps.map(item => ({
            title: item.title,
            icon: item.icon,
          }))}
          className="apple-steps"
        />
        
        <Divider />
        
        <Form
          form={licenseForm}
          layout="vertical"
          className="license-form"
          initialValues={{
            orderDate: moment(),
            startDate: moment(),
            expiryDate: moment().add(1, 'year'),
            authorizedWorkspaces: 1,
            authorizedUsers: 10
          }}
        >
          <div className="steps-content">
            {steps[current].content}
          </div>
          
          <div className="steps-action" style={{ marginTop: '24px', display: 'flex', justifyContent: 'space-between' }}>
            {current > 0 && (
              <Button 
                className="apple-button"
                onClick={() => setCurrent(current - 1)}
              >
                上一步
              </Button>
            )}
            
            {current < steps.length - 1 && (
              <Button 
                type="primary" 
                className="apple-button apple-button-primary"
                onClick={() => setCurrent(current + 1)}
              >
                下一步
              </Button>
            )}
            
            {current === steps.length - 1 && (
              <Button 
                type="primary" 
                loading={loading}
                className="apple-button apple-button-primary"
                onClick={handleSubmit}
              >
                提交
              </Button>
            )}
          </div>
        </Form>
      </Card>
    </div>
  );
};

export default Operations;
